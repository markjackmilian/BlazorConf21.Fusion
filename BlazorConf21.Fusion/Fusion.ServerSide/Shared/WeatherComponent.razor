@using Fusion.ServerSide.Data
@using System.Threading
@using Fusion.ServerSide.Services
@inject WeatherForecastService ForecastService
@inherits Stl.Fusion.Blazor.LiveComponentBase<Fusion.ServerSide.Data.WeatherForecast[]>


<h3>@this.City</h3>
<button  @onclick="AddForecastForCity">Invalidate</button>


@if (base.State.LastValue == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in base.State.LastValue)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    
    [Parameter] public string City { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        var t = 5;
    }

    protected override Task<WeatherForecast[]> ComputeStateAsync(CancellationToken cancellationToken)
    {
        return this.ForecastService.GetForecastAsync(this.City);
    }


    private void AddForecastForCity()
    {
        this.ForecastService.UpdateForecastForCity(this.City);
    }

}